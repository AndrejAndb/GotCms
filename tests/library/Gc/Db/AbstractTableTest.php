<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @linkuse  http://www.got-cms.com
 */

namespace Gc\Db;

use Gc\User\Model;
use Zend\Db\Sql\Select;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 *
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class AbstractTableTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractTable
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @covers Gc\Db\AbstractTable::__construct
     */
    protected function setUp()
    {
        $this->object = Model::fromArray(
            array(
                'lastname' => 'Test',
                'firstname' => 'Test',
                'email' => 'test@test.com',
                'login' => 'test',
                'user_acl_role_id' => 1,
            )
        );

        $this->object->setPassword('test');
        $this->object->save();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->delete();
        unset($this->object);
    }

    /**
     * @covers Gc\Db\AbstractTable::__call
     */
    public function testCall()
    {
        $this->assertInstanceOf('Zend\Db\ResultSet\ResultSet', $this->object->select());
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchRow
     */
    public function testFetchRow()
    {
        $result = $this->object->fetchRow($this->object->select());
        $this->assertInternalType('array', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchRow
     */
    public function testFetchRowFromQuery()
    {
        $select = new Select();
        $select->from('user');
        $result = $this->object->fetchAll($select);
        $this->assertInternalType('array', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchAll
     */
    public function testFetchAll()
    {
        $result = $this->object->fetchAll($this->object->select());
        $this->assertInternalType('array', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchAll
     */
    public function testFetchAllFromQuery()
    {
        $select = new Select();
        $select->from('user');
        $result = $this->object->fetchAll($select);
        $this->assertInternalType('array', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchOne
     */
    public function testFetchOneFromQuery()
    {
        $select = new Select();
        $select->from('user');
        $select->columns(array('email'));
        $select->where->equalTo('login', 'test');

        $result = $this->object->fetchOne($select);
        $this->assertEquals('test@test.com', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchOne
     * @covers Gc\Db\AbstractTable::__call
     */
    public function testFetchOne()
    {
        $result = $this->object->fetchOne($this->object->select());
        $this->assertInternalType('integer', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchOne
     * @covers Gc\Db\AbstractTable::__call
     */
    public function testFetchOneWitthFakeOption()
    {
        $result = $this->object->fetchOne($this->object->select(array('id' => 42)));
        $this->assertFalse($result);
    }

    /**
     * @covers Gc\Db\AbstractTable::execute
     */
    public function testExecute()
    {
        $select = new Select();
        $select->from('user');
        $result = $this->object->execute($select);
        $this->assertInstanceOf('Zend\Db\Adapter\Driver\Pdo\Result', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::getLastInsertId
     */
    public function testGetLastInsertId()
    {
        $this->assertInternalType('integer', $this->object->getLastInsertId());
    }

    /**
     * @covers Gc\Db\AbstractTable::events
     */
    public function testEvents()
    {
        $this->assertInstanceOf('Gc\Event\StaticEventManager', $this->object->events());
    }

    /**
     * @covers Gc\Db\AbstractTable::getDriverName
     */
    public function testGetDriverName()
    {
        $this->assertInternalType('string', $this->object->getDriverName());
    }
}
