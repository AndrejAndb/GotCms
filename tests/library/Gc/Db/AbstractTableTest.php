<?php
namespace Gc\Db;

use Gc\User\Model,
    Zend\Db\Sql\Select;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 */
class AbstractTableTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractTable
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers Gc\Db\AbstractTable::__construct
     */
    protected function setUp()
    {
        $this->_object = Model::fromArray(array(
            'lastname' => 'Test',
            'firstname' => 'Test',
            'email' => 'test@test.com',
            'login' => 'test',
            'user_acl_role_id' => 1,
        ));

        $this->_object->setPassword('test');
        $this->_object->save();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_object->delete();
        unset($this->_object);
    }

    /**
     * @covers Gc\Db\AbstractTable::__call
     */
    public function test__call()
    {
        unset(AbstractTable::$_tables['user']);
        $this->assertInstanceOf('Zend\Db\ResultSet\ResultSet', $this->_object->select());
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchRow
     */
    public function testFetchRow()
    {
        $result = $this->_object->fetchRow($this->_object->select());
        $this->assertInstanceOf('ArrayObject', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchRow
     */
    public function testFetchRowFromQuery()
    {
        $select = new Select();
        $select->from('user');
        $result = $this->_object->fetchAll($select);
        $this->assertInternalType('array', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchAll
     */
    public function testFetchAll()
    {
        $result = $this->_object->fetchAll($this->_object->select());
        $this->assertInternalType('array', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchAll
     */
    public function testFetchAllFromQuery()
    {
        $select = new Select();
        $select->from('user');
        $result = $this->_object->fetchAll($select);
        $this->assertInternalType('array', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchOne
     */
    public function testFetchOneFromQuery()
    {
        $select = new Select();
        $select->from('user');
        $select->columns(array('email'));
        $select->where->equalTo('login', 'test');

        $result = $this->_object->fetchOne($select);
        $this->assertEquals('test@test.com', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchOne
     * @covers Gc\Db\AbstractTable::__call
     */
    public function testFetchOne()
    {
        $result = $this->_object->fetchOne($this->_object->select());
        $this->assertInternalType('integer', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::fetchOne
     * @covers Gc\Db\AbstractTable::__call
     */
    public function testFetchOneWitthFakeOption()
    {
        $result = $this->_object->fetchOne($this->_object->select(array('id' => 42)));
        $this->assertFalse($result);
    }

    /**
     * @covers Gc\Db\AbstractTable::execute
     */
    public function testExecute()
    {
        $select = new Select();
        $select->from('user');
        $result = $this->_object->execute($select);
        $this->assertInstanceOf('Zend\Db\Adapter\Driver\Pdo\Result', $result);
    }

    /**
     * @covers Gc\Db\AbstractTable::getLastInsertId
     */
    public function testGetLastInsertId()
    {
        $this->assertInternalType('integer', $this->_object->getLastInsertId());
    }

    /**
     * @covers Gc\Db\AbstractTable::events
     */
    public function testEvents()
    {
        $this->assertInstanceOf('Gc\Event\StaticEventManager', $this->_object->events());
    }

    /**
     * @covers Gc\Db\AbstractTable::getDriverName
     */
    public function testGetDriverName()
    {
        $this->assertInternalType('string', $this->_object->getDriverName());
    }
}
