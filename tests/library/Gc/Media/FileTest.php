<?php
namespace Zend\File\Transfer\Adapter;

function is_uploaded_file($filename)
{
    return true;
}

function move_uploaded_file($filename, $destination)
{
    return copy($filename, $destination);
}


namespace Gc\Media;

use Gc\Document\Model as DocumentModel,
    Gc\Property\Model as PropertyModel;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:09.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class FileTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var File
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = new File;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Gc\Media\File::init
     */
    public function testInit()
    {
        $this->assertFalse($this->_object->init());
        $this->assertNull($this->_object->init(1, 1, 1));
    }

    /**
     * @covers Gc\Media\File::getPath
     */
    public function testGetPath()
    {
        $this->assertEquals(GC_APPLICATION_PATH . '/public', $this->_object->getPath());
    }

    /**
     * @covers Gc\Media\File::getDirectory
     */
    public function testGetDirectory()
    {
        $property = PropertyModel::fromArray(array(
            'id' => 1
        ));
        $document = DocumentModel::fromArray(array(
            'id' => 1
        ));
        $this->_object->init($property, $document);

        $this->assertEquals('/media/files/' . $document->getId() . '/' . $property->getId(), $this->_object->getDirectory());
    }

    /**
     * @covers Gc\Media\File::getFileTransfer
     */
    public function testGetFileTransfer()
    {
        $this->assertInstanceOf('Zend\File\Transfer\Adapter\Http', $this->_object->getFileTransfer());
    }

    /**
     * @covers Gc\Media\File::upload
     */
    public function testUpload()
    {
        $this->_initializeFiles();
        $this->assertFalse($this->_object->upload());
        $this->_removeDirectories();
    }

    /**
     * @covers Gc\Media\File::upload
     * @covers Gc\Media\File::remove
     */
    public function testUploadWithoutValidators()
    {
        $this->_initializeFiles();

        $this->_object->getFileTransfer()->removeValidator('Zend\Validator\File\Upload');
        $this->assertTrue($this->_object->upload());

        $files = $this->_object->getFiles();
        if(is_array($files))
        {
            foreach($files as $file)
            {
                $this->_object->remove($file->filename);
            }
        }

        $this->_removeDirectories();
    }

    /**
     * @covers Gc\Media\File::remove
     */
    public function testRemove()
    {
        $this->assertTrue($this->_object->remove('undefined-file'));
    }

    protected function _initializeFiles()
    {
        $_FILES = array(
            'test' => array(
                'name' => __DIR__ . '/_files/test.jpg',
                'type' => 'plain/text',
                'size' => 8,
                'tmp_name' => __DIR__ . '/_files/test.jpg',
                'error' => 0
            )
        );

        $property = PropertyModel::fromArray(array(
            'id' => 'test'
        ));
        $document = DocumentModel::fromArray(array(
            'id' => 'test'
        ));

        $this->_object->init($property, $document, 'test');
    }

    protected function _removeDirectories()
    {
        $dir = $this->_object->getPath() . $this->_object->getDirectory();
        if(is_dir($dir))
        {
            $tmp_dir = $dir;
            while($tmp_dir != GC_APPLICATION_PATH . '/public/media/files')
            {
                rmdir($tmp_dir);
                $tmp_dir = dirname($tmp_dir);
            }
        }
    }
}
