<?php
namespace Gc\User\Role;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:08.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class ModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = Model::fromId(1);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_object);
    }

    /**
     * @covers Gc\User\Role\Model::save
     */
    public function testSave()
    {
        $permissions = $this->_object->getUserPermissions();
        $array = array();
        foreach($permissions as $type_name => $type_values)
        {
            $array += $type_values;
        }

        $this->_object->setPermissions($array);
        $this->assertTrue(is_numeric($this->_object->save()));
    }

    /**
     * @covers Gc\User\Role\Model::save
     */
    public function testSaveWithoutId()
    {
        $model = new Model();
        $model->setName('New Name2');
        $model->setDescription('Test description2');

        $this->assertTrue(is_numeric($model->save()));
        $model->delete();
    }

    /**
     * @covers Gc\User\Role\Model::delete
     * @covers Gc\User\Role\Model::save
     */
    public function testDelete()
    {
        $model = new Model();
        $model->setName('New Name');
        $model->setDescription('Test description');
        $model->save();
        $this->assertTrue($model->delete());
    }

    /**
     * @covers Gc\User\Role\Model::delete
     */
    public function testFakeDelete()
    {
        $model = new Model();
        $this->assertFalse($model->delete());
    }

    /**
     * @covers Gc\User\Role\Model::fromArray
     */
    public function testFromArray()
    {
        $this->assertInstanceOf('Gc\User\Role\Model', Model::fromArray($this->_object->getData()));
    }

    /**
     * @covers Gc\User\Role\Model::fromId
     */
    public function testFromId()
    {
        $this->assertInstanceOf('Gc\User\Role\Model', Model::fromId(1));
    }

    /**
     * @covers Gc\User\Role\Model::fromId
     */
    public function testFromFakeId()
    {
        $this->assertFalse(Model::fromId(42));
    }

    /**
     * @covers Gc\User\Role\Model::getUserPermissions
     */
    public function testGetUserPermissions()
    {
        $this->assertTrue(is_array($this->_object->getUserPermissions()));
    }
}
