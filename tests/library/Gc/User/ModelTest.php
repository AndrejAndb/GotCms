<?php
namespace Gc\User;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:08.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class ModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = Model::fromArray(array(
            'lastname' => 'Test',
            'firstname' => 'Test',
            'email' => 'test@test.com',
            'login' => 'test-user-model',
            'user_acl_role_id' => 1,
        ));

        $this->_object->setPassword('test-user-model-password');
        $this->_object->save();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_object->delete();
        unset($this->_object);
    }

    /**
     * @covers Gc\User\Model::authenticate
     */
    public function testAuthenticate()
    {
        $this->assertTrue($this->_object->authenticate('test-user-model', 'test-user-model-password'));
    }


    /**
     * @covers Gc\User\Model::authenticate
     */
    public function testFakeAuthenticate()
    {
        $this->assertFalse($this->_object->authenticate('test', 'wrong password'));
    }

    /**
     * @covers Gc\User\Model::setEmail
     */
    public function testSetEmail()
    {
        $this->assertTrue($this->_object->setEmail('test-user-model@test.com'));
    }

    /**
     * @covers Gc\User\Model::setEmail
     */
    public function testSetFakeEmail()
    {
        $this->assertFalse($this->_object->setEmail('wrong email'));
    }

    /**
     * @covers Gc\User\Model::setPassword
     */
    public function testSetEncryptedPassword()
    {
        $password = sha1('test');
        $this->_object->setPassword('test');
        $this->assertEquals($password, $this->_object->getPassword());
    }

    /**
     * @covers Gc\User\Model::save
     */
    public function testSave()
    {
        $this->assertTrue(is_numeric($this->_object->save()));
    }

    /**
     * @covers Gc\User\Model::delete
     */
    public function testDeleteWithoutId()
    {
        $model = new Model();
        $this->assertFalse($model->delete());
    }

    /**
     * @covers Gc\User\Model::delete
     */
    public function testDelete()
    {
        $this->assertTrue($this->_object->delete());
    }

    /**
     * @covers Gc\User\Model::fromArray
     */
    public function testFromArray()
    {
        $this->_object->delete();
        $this->_object = Model::fromArray(array(
            'lastname' => 'Test',
            'firstname' => 'Test',
            'email' => 'test@test.com',
            'login' => 'test',
            'user_acl_role_id' => 1,
        ));

        $this->assertEquals('test@test.com', $this->_object->getEmail());
    }

    /**
     * @covers Gc\User\Model::fromId
     */
    public function testFromId()
    {
        $current_id = $this->_object->getId();
        $model = Model::fromId($current_id);

        $this->assertEquals($this->_object->getName(), $model->getName());
    }

    /**
     * @covers Gc\User\Model::fromId
     */
    public function testFromFakeId()
    {
        $this->assertFalse(Model::fromId(10000));
    }

    /**
     * @covers Gc\User\Model::getRole
     */
    public function testGetRole()
    {
        $this->assertInstanceOf('Gc\User\Role\Model', $this->_object->getRole());
    }

    /**
     * @covers Gc\User\Model::sendForgotPasswordEmail
     */
    public function testSendForgotPasswordEmail()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
