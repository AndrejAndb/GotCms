<?php
namespace Gc\User;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:08.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 */
class VisitorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Visitor
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = new Visitor;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_object);
    }

    /**
     * @covers Gc\User\Visitor::getVisitorId
     */
    public function testGetVisitorId()
    {
        $_SERVER['HTTP_USER_AGENT'] = 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0.11) Gecko/20100101 Firefox/10.0.11 Iceweasel/10.0.11';
        $_SERVER['HTTP_ACCEPT_CHARSET'] = NULL;
        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'en-us,en;q=0.5';
        $_SERVER['SERVER_ADDR'] = '127.0.0.1';
        $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
        $_SERVER['REQUEST_URI'] = '/test';
        $_SERVER['HTTP_REFERER'] = '/';
        $this->assertTrue(is_numeric($this->_object->getVisitorId('9135ejnhfiebe6u85qhmas7k12')));
    }
    /**
     * @covers Gc\User\Visitor::getVisitorId
     */
    public function testGetVisitorIdWithWrongData()
    {
        $_SERVER['HTTP_USER_AGENT'] = NULL;
        $_SERVER['HTTP_ACCEPT_CHARSET'] = NULL;
        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = NULL;
        $_SERVER['SERVER_ADDR'] = '127.0.0.1';
        $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
        $_SERVER['REQUEST_URI'] = '/test';
        $_SERVER['HTTP_REFERER'] = '/';
        $this->assertTrue(is_numeric($this->_object->getVisitorId('9135ejnhfiebe6u85qhmas7k12')));
    }

    /**
     * @covers Gc\User\Visitor::getUrlId
     */
    public function testGetUrlId()
    {
        $this->assertTrue(is_numeric($this->_object->getUrlId('/something', NULL)));
        //Existing url
        $this->assertTrue(is_numeric($this->_object->getUrlId('/something', NULL)));
        //with referer
        $this->assertTrue(is_numeric($this->_object->getUrlId('/something', '/somewhat')));
    }

    /**
     * @covers Gc\User\Visitor::getTotalVisitors
     */
    public function testGetTotalVisitors()
    {
        $this->assertTrue(is_numeric($this->_object->getTotalVisitors()));
    }

    /**
     * @covers Gc\User\Visitor::getTotalPageViews
     */
    public function testGetTotalPageViews()
    {
        $this->assertTrue(is_numeric($this->_object->getTotalPageViews()));
    }

    /**
     * @covers Gc\User\Visitor::getNbPagesViews
     * @covers Gc\User\Visitor::_sortData
     * @covers Gc\User\Visitor::_groupByDate
     */
    public function testGetNbPagesViews()
    {
        $this->assertTrue(is_array($this->_object->getNbPagesViews('HOUR')));
        $this->assertTrue(is_array($this->_object->getNbPagesViews('TEST')));
        $this->assertTrue(is_array($this->_object->getNbPagesViews('DAY')));
        $this->assertTrue(is_array($this->_object->getNbPagesViews('MONTH')));
        $this->assertTrue(is_array($this->_object->getNbPagesViews('YEAR')));
    }

    /**
     * @covers Gc\User\Visitor::getNbVisitors
     * @covers Gc\User\Visitor::_sortData
     * @covers Gc\User\Visitor::_groupByDate
     */
    public function testGetNbVisitors()
    {
        $this->assertTrue(is_array($this->_object->getNbVisitors('TEST')));
        $this->assertTrue(is_array($this->_object->getNbVisitors('HOUR')));
        $this->assertTrue(is_array($this->_object->getNbVisitors('DAY')));
        $this->assertTrue(is_array($this->_object->getNbVisitors('MONTH')));
        $this->assertTrue(is_array($this->_object->getNbVisitors('YEAR')));
    }

    /**
     * @covers Gc\User\Visitor::getUrlsViews
     * @covers Gc\User\Visitor::_sortData
     * @covers Gc\User\Visitor::_groupByDate
     */
    public function testGetUrlsViews()
    {
        $this->assertTrue(is_array($this->_object->getUrlsViews('TEST')));
        $this->assertTrue(is_array($this->_object->getUrlsViews('HOUR')));
        $this->assertTrue(is_array($this->_object->getUrlsViews('DAY')));
        $this->assertTrue(is_array($this->_object->getUrlsViews('MONTH')));
        $this->assertTrue(is_array($this->_object->getUrlsViews('YEAR')));
    }
}
