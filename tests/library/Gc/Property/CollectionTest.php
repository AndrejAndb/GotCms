<?php
namespace Gc\Property;

use Gc\Datatype\Model as DatatypeModel,
    Gc\Document\Model as DocumentModel,
    Gc\DocumentType\Model as DocumentTypeModel,
    Gc\Layout\Model as LayoutModel,
    Gc\User\Model as UserModel,
    Gc\View\Model as ViewModel,
    Gc\Tab\Model as TabModel;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 */
class CollectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Collection
     */
    protected $_object;

    /**
     * @var ViewModel
     */
    protected $_view;

    /**
     * @var LayoutModel
     */
    protected $_layout;

    /**
     * @var UserModel
     */
    protected $_user;

    /**
     * @var DocumentTypeModel
     */
    protected $_documentType;

    /**
     * @var TabModel
     */
    protected $_tab;

    /**
     * @var Model
     */
    protected $_property;

    /**
     * @var DatatypeModel
     */
    protected $_datatype;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_view = ViewModel::fromArray(array(
            'name' => 'View Name',
            'identifier' => 'View identifier',
            'description' => 'View Description',
            'content' => 'View Content'
        ));
        $this->_view->save();

        $this->_layout = LayoutModel::fromArray(array(
            'name' => 'Layout Name',
            'identifier' => 'Layout identifier',
            'description' => 'Layout Description',
            'content' => 'Layout Content'
        ));
        $this->_layout->save();

        $this->_user = UserModel::fromArray(array(
            'lastname' => 'User test',
            'firstname' => 'User test',
            'email' => 'test@test.com',
            'login' => 'test',
            'user_acl_role_id' => 1,
        ));
        $this->_user->setPassword('test');
        $this->_user->save();

        $this->_documentType = DocumentTypeModel::fromArray(array(
            'name' => 'Document Type Name',
            'description' => 'Document Type description',
            'icon_id' => 1,
            'default_view_id' => $this->_view->getId(),
            'user_id' => $this->_user->getId(),
        ));
        $this->_documentType->save();

        $this->_tab = TabModel::fromArray(array(
            'name' => 'TabTest',
            'description' => 'TabTest',
            'sort_order' => 1,
            'document_type_id' => $this->_documentType->getId(),
        ));
        $this->_tab->save();

        $this->_datatype = DatatypeModel::fromArray(array(
            'name' => 'BooleanTest',
            'prevalue_value' => '',
            'model' => 'Boolean',
        ));
        $this->_datatype->save();

        $this->_property = Model::fromArray(array(
            'name' => 'DatatypeTest',
            'identifier' => 'DatatypeTest',
            'description' => 'DatatypeTest',
            'required' => FALSE,
            'sort_order' => 1,
            'tab_id' => $this->_tab->getId(),
            'datatype_id' => $this->_datatype->getId(),
        ));

        $this->_property->save();

        $this->_object = new Collection;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_property->delete();
        $this->_datatype->delete();
        $this->_tab->delete();
        $this->_documentType->delete();
        $this->_user->delete();
        $this->_layout->delete();
        $this->_view->delete();
        unset($this->_property);
        unset($this->_datatype);
        unset($this->_tab);
        unset($this->_documentType);
        unset($this->_user);
        unset($this->_layout);
        unset($this->_view);
        unset($this->_object);
    }

    /**
     * @covers Gc\Property\Collection::load
     */
    public function testLoad()
    {
        $this->assertInstanceOf('Gc\Property\Collection', $this->_object->load());
    }

    /**
     * @covers Gc\Property\Collection::getProperties
     */
    public function testGetProperties()
    {
        $document_model = DocumentModel::fromArray(array(
            'name' => 'DocumentTest',
            'url_key' => 'document-test',
            'status' => DocumentModel::STATUS_ENABLE,
            'sort_order' => 1,
            'show_in_nav' => TRUE,
            'user_id' => $this->_user->getId(),
            'document_type_id' => $this->_documentType->getId(),
            'view_id' => $this->_view->getId(),
            'layout_id' => $this->_layout->getId(),
            'parent_id' => 0,
        ));
        $document_model->save();
        $this->_object->setDocumentId($document_model->getId());
        $this->_object->save();

        $this->_object->load($this->_documentType->getId(), $this->_tab->getId(), 1);
        $this->assertTrue(is_array($this->_object->getProperties(TRUE)));
        $this->_object->load();
        $this->assertTrue(is_array($this->_object->getProperties(TRUE)));
    }

    /**
     * @covers Gc\Property\Collection::setProperties
     */
    public function testSetProperties()
    {
        $this->assertInstanceOf('Gc\Property\Collection', $this->_object->setProperties(array($this->_property->getData())));
    }

    /**
     * @covers Gc\Property\Collection::save
     */
    public function testSave()
    {
        $this->_object->setProperties(array($this->_property->getData()));
        $this->assertTrue($this->_object->save());
    }

    /**
     * @covers Gc\Property\Collection::save
     */
    public function testSaveWithWrongValues()
    {
        $this->setExpectedException('Gc\Exception');
        $this->_property->setIdentifier(NULL);
        $this->_object->setProperties(array($this->_property->getData()));
        $this->assertFalse($this->_object->save());
    }

    /**
     * @covers Gc\Property\Collection::delete
     */
    public function testDelete()
    {
        $this->_object->setProperties(array($this->_property->getData()));
        $this->assertTrue($this->_object->delete());
    }
}
