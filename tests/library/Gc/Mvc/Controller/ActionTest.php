<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Mvc\Controller;

use Gc\Registry,
    Gc\User\Model as UserModel,
    Zend\Http\Request,
    Zend\Mvc\Router\RouteMatch;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 *
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class ActionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Action
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = new Action;
        $this->_object->setEvent(Registry::get('Application')->getMvcEvent());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Gc\Mvc\Controller\Action::onDispatch
     * @covers Gc\Mvc\Controller\Action::init
     * @covers Gc\Mvc\Controller\Action::_construct
     */
    public function testOnDispatchWithoutIdentity()
    {
        $this->_object->getEvent()->setRouteMatch(new RouteMatch(array('controller' => 'controller')));
        $this->_object->dispatch(Registry::get('Application')->getRequest(), NULL);

        $route_match = new RouteMatch(array());
        $route_match->setMatchedRouteName('content');
        $this->_object->getEvent()->setRouteMatch($route_match);
        $this->_object->onDispatch(Registry::get('Application')->getMvcEvent());

    }

    /**
     * @covers Gc\Mvc\Controller\Action::onDispatch
     * @covers Gc\Mvc\Controller\Action::init
     * @covers Gc\Mvc\Controller\Action::_construct
     */
    public function testOnDispatchWithIdentity()
    {
        $user_model = UserModel::fromArray(array(
            'lastname' => 'Test',
            'firstname' => 'Test',
            'email' => 'test@test.com',
            'login' => 'login-test',
            'user_acl_role_id' => 1,
        ));

        $user_model->setPassword('password-test');
        $user_model->save();
        $user_model->authenticate('login-test', 'password-test');


        $route_match = new RouteMatch(array());
        $route_match->setMatchedRouteName('renderWebsite');
        $this->_object->getEvent()->setRouteMatch($route_match);
        $this->_object->dispatch(Registry::get('Application')->getRequest(), NULL);
        $this->_object->onDispatch(Registry::get('Application')->getMvcEvent());

        $user_model->delete();
    }

    /**
     * @covers Gc\Mvc\Controller\Action::getRouteMatch
     */
    public function testGetRouteMatch()
    {
        $this->_object->getEvent()->setRouteMatch(new RouteMatch(array('controller' => 'controller')));
        $this->assertInstanceOf('Zend\Mvc\Router\RouteMatch', $this->_object->getRouteMatch());
    }

    /**
     * @covers Gc\Mvc\Controller\Action::getSession
     */
    public function testGetSession()
    {
        $this->assertInstanceOf('Zend\Session\Container', $this->_object->getSession());
    }

    /**
     * @covers Gc\Mvc\Controller\Action::getAuth
     */
    public function testGetAuth()
    {
        $this->assertInstanceOf('Zend\Authentication\AuthenticationService', $this->_object->getAuth());
    }

    /**
     * @covers Gc\Mvc\Controller\Action::returnJson
     */
    public function testReturnJson()
    {
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $this->_object->returnJson(array()));
    }

    /**
     * @covers Gc\Mvc\Controller\Action::events
     */
    public function testEvents()
    {
        $this->assertInstanceOf('Gc\Event\StaticEventManager', $this->_object->events());
    }

    /**
     * @covers Gc\Mvc\Controller\Action::useFlashMessenger
     */
    public function testUseflashMessenger()
    {
        $this->_object->flashMessenger()->addInfoMessage('Test');
        $this->assertNull($this->_object->useFlashMessenger(FALSE));
        $this->assertNull($this->_object->useFlashMessenger(TRUE));
    }
}
