<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Document;

use Gc\Document\Model as DocumentModel,
    Gc\DocumentType\Model as DocumentTypeModel,
    Gc\Layout\Model as LayoutModel,
    Gc\User\Model as UserModel,
    Gc\View\Model as ViewModel;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:09.
 *
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class CollectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Collection
     */
    protected $_object;

    /**
     * @var ViewModel
     */
    protected $_view;

    /**
     * @var LayoutModel
     */
    protected $_layout;

    /**
     * @var UserModel
     */
    protected $_user;

    /**
     * @var DocumentTypeModel
     */
    protected $_documentType;

    /**
     * @var DocumentModel
     */
    protected $_document;

    /**
     * @var DocumentModel
     */
    protected $_documentChildren;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_view = ViewModel::fromArray(array(
            'name' => 'View Name',
            'identifier' => 'View identifier',
            'description' => 'View Description',
            'content' => 'View Content'
        ));
        $this->_view->save();

        $this->_layout = LayoutModel::fromArray(array(
            'name' => 'Layout Name',
            'identifier' => 'Layout identifier',
            'description' => 'Layout Description',
            'content' => 'Layout Content'
        ));
        $this->_layout->save();

        $this->_user = UserModel::fromArray(array(
            'lastname' => 'User test',
            'firstname' => 'User test',
            'email' => 'test@test.com',
            'login' => 'test',
            'user_acl_role_id' => 1,
        ));

        $this->_user->setPassword('test');
        $this->_user->save();

        $this->_documentType = DocumentTypeModel::fromArray(array(
            'name' => 'Document Type Name',
            'description' => 'Document Type description',
            'icon_id' => 1,
            'default_view_id' => $this->_view->getId(),
            'user_id' => $this->_user->getId(),
        ));

        $this->_documentType->save();

        $this->_document = DocumentModel::fromArray(array(
            'name' => 'Document name',
            'url_key' => 'url-key',
            'status' => DocumentModel::STATUS_ENABLE,
            'show_in_nav' => TRUE,
            'user_id' => $this->_user->getId(),
            'document_type_id' => $this->_documentType->getId(),
            'view_id' => $this->_view->getId(),
            'layout_id' => $this->_layout->getId(),
            'parent_id' => 0
        ));

        $this->_document->save();

        $this->_documentChildren = DocumentModel::fromArray(array(
            'name' => 'Document name',
            'url_key' => 'url-key',
            'status' => DocumentModel::STATUS_ENABLE,
            'show_in_nav' => TRUE,
            'user_id' => $this->_user->getId(),
            'document_type_id' => $this->_documentType->getId(),
            'view_id' => $this->_view->getId(),
            'layout_id' => $this->_layout->getId(),
            'parent_id' => $this->_document->getId()
        ));

        $this->_documentChildren->save();
        $this->_object = new Collection;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_document->delete();
        unset($this->_document);

        $this->_documentChildren->delete();
        unset($this->_documentChildren);

        $this->_view->delete();
        unset($this->_view);

        $this->_user->delete();
        unset($this->_user);

        $this->_layout->delete();
        unset($this->_layout);

        $this->_documentType->delete();
        unset($this->_documentType);

        unset($this->_object);
    }

    /**
     * @covers Gc\Document\Collection::load
     * @covers Gc\Document\Collection::setDocuments
     */
    public function testLoad()
    {
        $this->_object->load(0);
        $this->assertInternalType('array', $this->_object->getDocuments());
    }

    /**
     * @covers Gc\Document\Collection::load
     * @covers Gc\Document\Collection::setDocuments
     */
    public function testLoadWithParentId()
    {
        $this->_object->load($this->_document->getId());
        $this->assertInternalType('array', $this->_object->getDocuments());
    }

    /**
     * @covers Gc\Document\Collection::getAvailableDocuments
     */
    public function testGetAvailableDocuments()
    {
        $this->assertInternalType('array', $this->_object->getAvailableDocuments());
    }

    /**
     * @covers Gc\Document\Collection::getSelect
     */
    public function testGetSelect()
    {
        $this->_object->load(0);
        $this->assertInternalType('array', $this->_object->getSelect());
    }

    /**
     * @covers Gc\Document\Collection::getParent
     */
    public function testGetParent()
    {
        $this->_object->load(0);
        $this->assertFalse($this->_object->getParent());
    }

    /**
     * @covers Gc\Document\Collection::getChildren
     */
    public function testGetChildren()
    {
        $this->_object->load(0);
        $this->assertInternalType('array', $this->_object->getChildren());
    }

    /**
     * @covers Gc\Document\Collection::getAvailableChildren
     */
    public function testGetAvailableChilren()
    {
        $this->_object->load(0);
        $this->assertInternalType('array', $this->_object->getAvailableChildren());
    }

    /**
     * @covers Gc\Document\Collection::getId
     */
    public function testGetId()
    {
        $this->assertFalse($this->_object->getId());
    }

    /**
     * @covers Gc\Document\Collection::getIcon
     */
    public function testGetIcon()
    {
        $this->assertEquals('folder', $this->_object->getIcon());
    }

    /**
     * @covers Gc\Document\Collection::getIterableId
     */
    public function testGetIterableId()
    {
        $this->assertEquals('documents', $this->_object->getIterableId());
    }

    /**
     * @covers Gc\Document\Collection::getName
     */
    public function testGetName()
    {
        $this->assertEquals('Website', $this->_object->getName());
    }

    /**
     * @covers Gc\Document\Collection::getEditUrl
     */
    public function testGetEditUrl()
    {

        $this->assertNull($this->_object->getEditUrl());
    }
}
