<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Datatype;

use Gc\Datatype\Model as DatatypeModel,
    Gc\Document\Model as DocumentModel,
    Gc\DocumentType\Model as DocumentTypeModel,
    Gc\Layout\Model as LayoutModel,
    Gc\Property\Model as PropertyModel,
    Gc\User\Model as UserModel,
    Gc\View\Model as ViewModel,
    Gc\Tab\Model as TabModel;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:10.
 *
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class ModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = Model::fromArray(array(
            'name' => 'ModelTest',
            'prevalue_value' => '',
            'description' => 'ModelTest',
            'model' => 'Textstring',
        ));
        $this->object->save();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->delete();
        unset($this->object);
    }

    /**
     * @covers Gc\Datatype\Model::setPrevalueValue
     */
    public function testSetPrevalueValue()
    {
        $this->object->setPrevalueValue('s:11:"string test";');
        $this->assertEquals('string test', $this->object->getPrevalueValue());
        $this->object->setPrevalueValue(array('array test'));
        $this->assertEquals(array('array test'), $this->object->getPrevalueValue());
    }

    /**
     * @covers Gc\Datatype\Model::fromArray
     */
    public function testFromArray()
    {
        $this->assertInstanceOf('Gc\Datatype\Model', $this->object->fromArray(array(
            'name' => 'ModelTest',
            'prevalue_value' => '',
            'description' => 'ModelTest',
            'model' => 'ModelTest',
        )));
    }

    /**
     * @covers Gc\Datatype\Model::fromId
     */
    public function testFromId()
    {

        $this->assertInstanceOf('Gc\Datatype\Model', Model::fromId($this->object->getId()));
        $this->assertFalse(Model::fromId('undefined id'));
    }

    /**
     * @covers Gc\Datatype\Model::save
     */
    public function testSave()
    {
        $model = $this->object->fromArray(array(
            'name' => 'ModelTest',
            'prevalue_value' => '',
            'description' => 'ModelTest',
            'model' => 'ModelTest',
        ));
        $this->assertInternalType('integer', $model->save());
        //Test update
        $this->assertInternalType('integer', $model->save());
        $model->delete();
    }

    /**
     * @covers Gc\Datatype\Model::save
     */
    public function testSaveWithWrongValues()
    {
        $this->setExpectedException('Gc\Exception');
        $model = $this->object->fromArray(array(
            'name' => 'ModelTest',
            'prevalue_value' => '',
            'description' => 'ModelTest',
        ));
        $this->assertFalse($model->save());
    }

    /**
     * @covers Gc\Datatype\Model::delete
     */
    public function testDelete()
    {
        $this->assertTrue($this->object->delete());
    }

    /**
     * @covers Gc\Datatype\Model::delete
     */
    public function testDeleteWithoutId()
    {
        $model = new Model();
        $this->assertFalse($model->delete());
    }

    /**
     * @covers Gc\Datatype\Model::delete
     */
    public function testDeleteWithWrongValues()
    {
        $this->setExpectedException('Gc\Exception');
        $model = new Model();
        $model->setId('undefined');
        $this->assertFalse($model->delete());
    }

    /**
     * @covers Gc\Datatype\Model::savePrevalueEditor
     */
    public function testSavePrevalueEditor()
    {
        $this->assertInternalType('array', Model::savePrevalueEditor(Model::loadDatatype($this->object->getId())));
    }

    /**
     * @covers Gc\Datatype\Model::saveEditor
     */
    public function testSaveEditor()
    {
        $view_model = ViewModel::fromArray(array(
            'name' => 'View Name',
            'identifier' => 'View identifier',
            'description' => 'View Description',
            'content' => 'View Content'
        ));
        $view_model->save();

        $layout_model = LayoutModel::fromArray(array(
            'name' => 'Layout Name',
            'identifier' => 'Layout identifier',
            'description' => 'Layout Description',
            'content' => 'Layout Content'
        ));
        $layout_model->save();

        $user_model = UserModel::fromArray(array(
            'lastname' => 'User test',
            'firstname' => 'User test',
            'email' => 'test@test.com',
            'login' => 'test',
            'user_acl_role_id' => 1,
        ));
        $user_model->setPassword('test');
        $user_model->save();

        $document_type_model = DocumentTypeModel::fromArray(array(
            'name' => 'Document Type Name',
            'description' => 'Document Type description',
            'icon_id' => 1,
            'defaultview_id' => $view_model->getId(),
            'user_id' => $user_model->getId(),
        ));
        $document_type_model->save();

        $tab_model = TabModel::fromArray(array(
            'name' => 'TabTest',
            'description' => 'TabTest',
            'sort_order' => 1,
            'document_type_id' => $document_type_model->getId(),
        ));
        $tab_model->save();

        $document_model = DocumentModel::fromArray(array(
            'name' => 'DocumentTest',
            'url_key' => 'document-test',
            'status' => DocumentModel::STATUS_ENABLE,
            'sort_order' => 1,
            'show_in_nav' => TRUE,
            'user_id' => $user_model->getId(),
            'document_type_id' => $document_type_model->getId(),
            'view_id' => $view_model->getId(),
            'layout_id' => $layout_model->getId(),
            'parent_id' => 0,
        ));
        $document_model->save();

        $property_model = PropertyModel::fromArray(array(
            'datatype_id' => $this->object->getId(),
            'document_id' => $document_model->getId(),
            'tab_id' => $tab_model->getId(),
            'name' => 'PropertyTest',
            'identifier' => 'PropertyTest',
            'description' => 'PropertyTest',
            'required' => TRUE,
            'sort_order' => 1,
        ));
        $property_model->save();

        $this->assertFalse(Model::saveEditor($property_model));
        $property_model->isRequired(FALSE);
        $this->assertTrue(Model::saveEditor($property_model));

        $property_model->delete();
        $document_model->delete();
        $tab_model->delete();
        $document_type_model->delete();
        $view_model->delete();
        $layout_model->delete();
    }

    /**
     * @covers Gc\Datatype\Model::loadPrevalueEditor
     */
    public function testLoadPrevalueEditor()
    {
        $this->assertInstanceOf('Zend\Form\Fieldset', Model::loadPrevalueEditor(Model::loadDatatype($this->object->getId())));
    }

    /**
     * @covers Gc\Datatype\Model::loadEditor
     */
    public function testLoadEditor()
    {
        $model = PropertyModel::fromArray(array(
            'datatype_id' => $this->object->getId(),
            'document_id' => 1,
        ));
        //Specific to Textstring editor
        $this->assertInstanceOf('Zend\Form\Element\Text', Model::loadEditor($model));
    }

    /**
     * @covers Gc\Datatype\Model::loadDatatype
     */
    public function testLoadDatatype()
    {
        $this->assertInstanceOf('Gc\Datatype\AbstractDatatype', Model::loadDatatype($this->object->getId()));
    }
}
