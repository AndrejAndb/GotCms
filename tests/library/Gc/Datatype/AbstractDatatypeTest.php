<?php
namespace Gc\Datatype;

use Gc\Datatype\Model as DatatypeModel;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:10.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class AbstractDatatypeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractDatatype
     */
    protected $_object;

    /**
     * @var DatatypeModel
     */
    protected $_datatype;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_datatype = DatatypeModel::fromArray(array(
            'name' => 'AbstractDatatype',
            'prevalue_value' => 'AbstractDatatype',
            'model' => 'AbstractDatatype',
        ));
        $this->_datatype->save();

        $this->_object = $this->getMockForAbstractClass('Gc\Datatype\AbstractDatatype');
        $this->_object->load($this->_datatype, 1);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::getInfos
     */
    public function testGetInfos()
    {
        $this->assertFalse($this->_object->getInfos());
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::load
     */
    public function testLoad()
    {
        $this->assertEquals(1, $this->_object->getDocumentId());
        $this->assertInstanceOf('Gc\Datatype\Model', $this->_object->getDatatypeModel());
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::load
     */
    public function testLoadWithEmptyDatatype()
    {
        $this->assertFalse($this->_object->load(NULL, NULL));
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::getConfig
     */
    public function testGetConfig()
    {
        $this->assertEquals('AbstractDatatype', $this->_object->getConfig());
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::setConfig
     */
    public function testSetConfig()
    {
        $this->_object->setConfig('NewValue');
        $this->assertEquals('NewValue', $this->_object->getConfig());
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::getUploadUrl
     */
    public function testGetUploadUrl()
    {
        $this->assertEquals('/admin/content/media/upload/document/1/property/1', $this->_object->getUploadUrl(1));
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::getHelper
     */
    public function testGetHelper()
    {
        $this->assertInstanceOf('Gc\View\Helper\Partial', $this->_object->getHelper('partial'));
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::getProperty
     */
    public function testGetProperty()
    {
        $this->assertNull($this->_object->getProperty());
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::setProperty
     */
    public function testSetProperty()
    {
        $this->_object->setProperty('test');
        $this->assertEquals('test', $this->_object->getProperty());
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::getName
     */
    public function testGetName()
    {
        $this->assertEquals('datatype', $this->_object->getName());
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::addPath
     */
    public function testAddPath()
    {
        $this->assertInstanceOf('Gc\Datatype\AbstractDatatype', $this->_object->addPath(__DIR__));
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::addPath
     * @covers Gc\Datatype\AbstractDatatype::render
     */
    public function testRender()
    {
        $this->_object->addPath(__DIR__);
        $this->assertEquals('String' . PHP_EOL, $this->_object->render('_files/template.phtml'));
    }

    /**
     * @covers Gc\Datatype\AbstractDatatype::getDocument
     */
    public function testGetDocument()
    {
        $this->assertFalse($this->_object->getDocument());
    }
}
