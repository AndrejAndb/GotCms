<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\DocumentType;

use Gc\Layout\Model as LayoutModel,
    Gc\User\Model as UserModel,
    Gc\View\Model as ViewModel,
    Zend\Db\Sql\Insert;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:09.
 *
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class ModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     */
    protected $_object;

    /**
     * @var ViewModel
     */
    protected $_view;

    /**
     * @var LayoutModel
     */
    protected $_layout;

    /**
     * @var UserModel
     */
    protected $_user;

    /**
     * @var Model
     */
    protected $_documentTypeChildren;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_view = ViewModel::fromArray(array(
            'name' => 'View Name',
            'identifier' => 'View identifier',
            'description' => 'View Description',
            'content' => 'View Content'
        ));
        $this->_view->save();

        $this->_layout = LayoutModel::fromArray(array(
            'name' => 'Layout Name',
            'identifier' => 'Layout identifier',
            'description' => 'Layout Description',
            'content' => 'Layout Content'
        ));
        $this->_layout->save();

        $this->_user = UserModel::fromArray(array(
            'lastname' => 'User test',
            'firstname' => 'User test',
            'email' => 'test@test.com',
            'login' => 'test',
            'user_acl_role_id' => 1,
        ));

        $this->_user->setPassword('test');
        $this->_user->save();

        $this->_object = Model::fromArray(array(
            'name' => 'Document Type Name',
            'description' => 'Document Type description',
            'icon_id' => 1,
            'default_view_id' => $this->_view->getId(),
            'user_id' => $this->_user->getId(),
        ));
        $this->_object->save();

        $this->_documentTypeChildren = Model::fromArray(array(
            'name' => 'Document Type children Name',
            'description' => 'Document Type children description',
            'icon_id' => 1,
            'default_view_id' => $this->_view->getId(),
            'user_id' => $this->_user->getId(),
        ));
        $this->_documentTypeChildren->save();

        $insert = new Insert();
        $insert->into('document_type_dependency')
            ->values(array(
                'parent_id' => $this->_object->getId(),
                'children_id' => $this->_documentTypeChildren->getId()
            ));

        $this->_object->execute($insert);

        $insert = new Insert();
        $insert->into('document_type_view')
            ->values(array(
                'view_id' => $this->_view->getId(),
                'document_type_id' => $this->_object->getId()
            ));

        $this->_object->execute($insert);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_documentTypeChildren->delete();
        unset($this->_documentTypeChildren);

        $this->_object->delete();
        unset($this->_object);

        $this->_view->delete();
        unset($this->_view);

        $this->_layout->delete();
        unset($this->_layout);

        $this->_user->delete();
        unset($this->_user);
    }

    /**
     * @covers Gc\DocumentType\Model::getUser
     */
    public function testGetUser()
    {
        $this->assertInstanceOf('Gc\User\Model', $this->_object->getUser());
    }

    /**
     * @covers Gc\DocumentType\Model::addView
     */
    public function testAddView()
    {
        $this->assertInstanceOf('Gc\DocumentType\Model', $this->_object->addView($this->_view->getId()));
    }

    /**
     * @covers Gc\DocumentType\Model::addViews
     */
    public function testAddViews()
    {

        $this->assertInstanceOf('Gc\DocumentType\Model', $this->_object->addViews(array($this->_view->getId())));
    }

    /**
     * @covers Gc\DocumentType\Model::getTabs
     */
    public function testGetTabs()
    {
        $this->assertInternalType('array', $this->_object->getTabs());
    }

    /**
     * @covers Gc\DocumentType\Model::getAvailableViews
     */
    public function testGetAvailableViews()
    {
        $this->assertInstanceOf('Gc\View\Collection', $this->_object->getAvailableViews());
    }

    /**
     * @covers Gc\DocumentType\Model::getDependencies
     */
    public function testGetDependencies()
    {
        $this->assertInternalType('array', $this->_object->getDependencies());
    }

    /**
     * @covers Gc\DocumentType\Model::save
     */
    public function testSave()
    {
        $this->_object->addViews(array($this->_view->getId(), 0));
        $this->_object->setDependencies(array($this->_object->getId()));
        $this->assertInternalType('integer', $this->_object->save());
    }

    /**
     * @covers Gc\DocumentType\Model::save
     */
    public function testSaveWithWrongValues()
    {
        $this->setExpectedException('Gc\Exception');
        $model = $this->_object->fromArray(array(
            'name' => NULL,
            'description' => NULL,
            'icon_id' => NULL,
            'default_view_id' => NULL,
            'user_id' => NULL,
        ));
        $this->assertFalse($model->save());
    }

    /**
     * @covers Gc\DocumentType\Model::delete
     */
    public function testDelete()
    {
        $this->assertTrue($this->_object->delete());
    }

    /**
     * @covers Gc\DocumentType\Model::delete
     */
    public function testDeleteWithoutId()
    {
        $model = new Model();
        $this->assertFalse($model->delete());
    }

    /**
     * @covers Gc\DocumentType\Model::fromArray
     */
    public function testFromArray()
    {
        $model = Model::fromArray($this->_object->getData());
        $this->assertInstanceOf('Gc\DocumentType\Model', $model);
    }

    /**
     * @covers Gc\DocumentType\Model::fromId
     */
    public function testFromId()
    {
        $model = Model::fromId($this->_object->getId());
        $this->assertInstanceOf('Gc\DocumentType\Model', $model);
    }

    /**
     * @covers Gc\DocumentType\Model::fromId
     */
    public function testFromFakeId()
    {
        $model = Model::fromId(1000);
        $this->assertFalse($model);
    }
}
