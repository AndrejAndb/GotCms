<?php
namespace Gc\View\Helper;

use Zend\View\Helper\Partial;
use Zend\View\Renderer\PhpRenderer as View;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:07.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class PartialTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Partial
     */
    protected $_object;

    /**
    * @var string
    */
    public $basePath;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->basePath = __DIR__ . '/_files/views';
        $this->_object = new Partial;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_object);
    }

    /**
    * @return void
    */
    public function testPartialRendersScript()
    {
        $view = new View();
        $view->resolver()->addPath($this->basePath);
        $this->_object->setView($view);
        $return = $this->_object->__invoke('partial-one.phtml');
        $this->assertContains("This is the first partial\n", $return);
    }

    /**
    * @return void
    */
    public function testPartialRendersScriptWithVars()
    {
        $view = new View();
        $view->resolver()->addPath($this->basePath);
        $view->vars()->message = 'This should never be read';
        $this->_object->setView($view);
        $return = $this->_object->__invoke('partial-two.phtml', array('message' => 'This message should be read'));
        $this->assertNotContains('This should never be read', $return);
        $this->assertContains('This message should be read', $return, $return);
    }

    /**
    * @return void
    */
    public function testSetViewSetsViewProperty()
    {
        $view = new View();
        $this->_object->setView($view);
        $this->assertSame($view, $this->_object->getView());
    }

    /**
    * @return void
    */
    public function testCloneViewReturnsDifferentViewInstance()
    {
        $view = new View();
        $this->_object->setView($view);
        $clone = $this->_object->cloneView();
        $this->assertNotSame($view, $clone);
        $this->assertTrue($clone instanceof View);
    }

    /**
    * @return void
    */
    public function testCloneViewClearsViewVariables()
    {
        $view = new View();
        $view->foo = 'bar';
        $this->_object->setView($view);

        $clone = $this->_object->cloneView();
        $clonedVars = $clone->vars();

        $this->assertEquals(0, count($clonedVars));
        $this->assertNull($clone->vars()->foo);
    }

    public function testObjectModelWithPublicPropertiesSetsViewVariables()
    {
        $model = new \stdClass();
        $model->foo = 'bar';
        $model->bar = 'baz';

        $view = new View();
        $view->resolver()->addPath($this->basePath);
        $this->_object->setView($view);
        $return = $this->_object->__invoke('partial-vars.phtml', $model);

        foreach (get_object_vars($model) as $key => $value)
        {
            $string = sprintf('%s: %s', $key, $value);
            $this->assertContains($string, $return);
        }
    }

    public function testObjectModelWithToArraySetsViewVariables()
    {
        $model = new Aggregate();

        $view = new View();
        $view->resolver()->addPath($this->basePath);
        $this->_object->setView($view);
        $return = $this->_object->__invoke('partial-vars.phtml', $model);

        foreach ($model->toArray() as $key => $value)
        {
            $string = sprintf('%s: %s', $key, $value);
            $this->assertContains($string, $return);
        }
    }

    public function testObjectModelSetInObjectKeyWhenKeyPresent()
    {
        $this->_object->setObjectKey('foo');
        $model = new \stdClass();
        $model->footest = 'bar';
        $model->bartest = 'baz';

        $view = new View;
        $view->resolver()->addPath($this->basePath);
        $this->_object->setView($view);
        $return = $this->_object->__invoke('partial-obj.phtml', $model);
        $this->assertNotContains('No object model passed', $return);

        foreach (get_object_vars($model) as $key => $value)
        {
            $string = sprintf('%s: %s', $key, $value);
            $this->assertContains($string, $return, "Checking for '$return' containing '$string'");
        }
    }

    public function testPassingNoArgsReturnsHelperInstance()
    {
        $test = $this->_object->__invoke();
        $this->assertSame($this->_object, $test);
    }

    public function testObjectKeyIsNullByDefault()
    {
        $this->assertNull($this->_object->getObjectKey());
    }

    public function testCanSetObjectKey()
    {
        $this->testObjectKeyIsNullByDefault();
        $this->_object->setObjectKey('foo');
        $this->assertEquals('foo', $this->_object->getObjectKey());
    }

    public function testCanSetObjectKeyToNullValue()
    {
        $this->testCanSetObjectKey();
        $this->_object->setObjectKey(null);
        $this->assertNull($this->_object->getObjectKey());
    }

    public function testSetObjectKeyImplementsFluentInterface()
    {
        $test = $this->_object->setObjectKey('foo');
        $this->assertSame($this->_object, $test);
    }
}

class Aggregate
{
    public $vars = array(
        'foo' => 'bar',
        'bar' => 'baz'
    );

    public function toArray()
    {
        return $this->vars;
    }
}
