<?php
namespace Gc\View;

use Gc\DocumentType\Model as DocumentTypeModel;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:07.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class CollectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Collection
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = new Collection;

        $model = Model::fromArray(array(
            'name' => 'name-collection-test',
            'identifier' => 'identifier-collection-test',
            'description' => 'description-collection-test',
            'content' => 'content-collection-test'
        ));

        $model->save();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $model = Model::fromIdentifier('identifier-collection-test');
        $model->delete();
        unset($this->_object);
    }

    /**
     * @covers Gc\View\Collection::init
     */
    public function testInit()
    {
        $this->_object->init(1);
        $this->assertEquals(1, $this->_object->getDocumentTypeId());
    }

    /**
     * @covers Gc\View\Collection::getViews
     */
    public function testGetViewsWithDocumentType()
    {
        $this->_object->init(1000);
        $views = $this->_object->getViews();
        $this->assertEquals(0, count($views));
    }

    /**
     * @covers Gc\View\Collection::getViews
     */
    public function testGetViews()
    {
        $this->_object->init(NULL);
        $views = $this->_object->getViews();
        $this->assertEquals(1, count($views));
    }

    /**
     * @covers Gc\View\Collection::getSelect
     */
    public function testGetSelect()
    {
        $this->_object->init(NULL);
        $views = $this->_object->getSelect();
        $this->assertTrue(count($views) > 0);
    }

    /**
     * @covers Gc\View\Collection::addElement
     */
    public function testAddElement()
    {
        $model = Model::fromIdentifier('identifier-collection-test');
        $this->_object->addElement($model);
        $this->assertEquals(1, count($this->_object->getElements()));
    }

    /**
     * @covers Gc\View\Collection::clearElements
     */
    public function testClearElements()
    {
        $model = Model::fromIdentifier('identifier-collection-test');
        $this->_object->addElement($model);
        $this->_object->clearElements();
        $this->assertEquals(0, count($this->_object->getElements()));
    }

    /**
     * @covers Gc\View\Collection::getElements
     */
    public function testGetElements()
    {
        $model = Model::fromIdentifier('identifier-collection-test');
        $this->_object->addElement($model);
        $this->assertEquals(1, count($this->_object->getElements()));
    }

    /**
     * @covers Gc\View\Collection::save
     */
    public function testSave()
    {
        $model = Model::fromIdentifier('identifier-collection-test');
        $document_type = DocumentTypeModel::fromArray(array(
            'name' => 'Document type name',
            'description' => 'Document type description',
            'default_view_id' => $model->getId(),
            'icon_id' => 1,
            'user_id' => 1,
        ));

        $document_type->save();
        $this->_object->init($document_type->getId());
        $this->_object->addElement($model);

        $this->assertTrue($this->_object->save());
        $document_type->delete();
    }

    /**
     * @covers Gc\View\Collection::save
     */
    public function testSaveFailed()
    {
        $this->_object->init(0);
        $this->assertFalse($this->_object->save());
    }

    /**
     * @covers Gc\View\Collection::delete
     */
    public function testDelete()
    {
        $model = Model::fromIdentifier('identifier-collection-test');
        $document_type = DocumentTypeModel::fromArray(array(
            'name' => 'Document type name',
            'description' => 'Document type description',
            'default_view_id' => $model->getId(),
            'icon_id' => 1,
            'user_id' => 1,
        ));

        $document_type->save();
        $this->_object->init($document_type->getId());
        $this->_object->addElement($model);
        $this->_object->save();

        $this->assertTrue($this->_object->delete());
        $document_type->delete();
    }

    /**
     * @covers Gc\View\Collection::delete
     */
    public function testDeleteFailed()
    {
        $this->_object->init(0);
        $this->assertFalse($this->_object->delete());
    }
}
