<?php
namespace Gc;

use RuntimeException;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:09.
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class RegistryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Registry
     */
    protected $_object;

    /**
     * @var Registry
     */
    protected $_old_instance;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers Gc\Registry::__construct
     */
    protected function setUp()
    {
        $this->_old_instance = Registry::getInstance();
        $this->_object = new Registry;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_object->_unsetInstance();
        Registry::setInstance($this->_old_instance);
    }

    /**
     * @covers Gc\Registry::getInstance
     * @covers Gc\Registry::init
     * @covers Gc\Registry::_unsetInstance
     */
    public function testGetInstance()
    {
        $this->_object->_unsetInstance();
        $this->assertInstanceOf('Gc\Registry', Registry::getInstance());
    }

    /**
     * @covers Gc\Registry::setInstance
     */
    public function testSetInstance()
    {
        $this->_object->_unsetInstance();
        $this->_object->setInstance(new Registry);
        $this->assertInstanceOf('Gc\Registry', Registry::getInstance());
    }

    /**
     * @covers Gc\Registry::setInstance
     */
    public function testSetInstanceWithRegistryAlreadyInitialized()
    {
        $this->setExpectedException('RuntimeException');
        $this->_object->setInstance(new Registry);
    }

    /**
     * @covers Gc\Registry::get
     */
    public function testGet()
    {
        $this->_object->set('key', 'value');
        $this->assertEquals('value', $this->_object->get('key'));
    }

    /**
     * @covers Gc\Registry::get
     */
    public function testGetFakeData()
    {
        $this->setExpectedException('RuntimeException');
        $this->_object->get('foo');
    }

    /**
     * @covers Gc\Registry::set
     */
    public function testSet()
    {
        $this->_object->set('key', 'value');
        $this->assertEquals('value', $this->_object->get('key'));
    }

    /**
     * @covers Gc\Registry::isRegistered
     */
    public function testIsRegisteredWithData()
    {
        $this->_object->set('key', 'value');
        $this->assertTrue($this->_object->isRegistered('key'));
    }

    /**
     * @covers Gc\Registry::isRegistered
     */
    public function testIsRegisteredWithoutData()
    {
        $this->_object->_unsetInstance();
        $this->assertFalse($this->_object->isRegistered('key'));
    }

    /**
     * @covers Gc\Registry::offsetExists
     */
    public function testOffsetExists()
    {
        $this->_object->set('key', 'value');
        $this->assertTrue($this->_object->isRegistered('key'));
    }
}
